provider "aws" {
  region     = "us-east-2"
  access_key = "AKIAXH2ZRTONXZUUD63I"
  secret_key = "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"
}

# VPC Components
resource "aws_vpc" "ecomm-vpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "ecomm"
  }
}


# Public Subnet - AZ - A
resource "aws_subnet" "ecomm-pub-subnet-a" {
  vpc_id                  = aws_vpc.ecomm-vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-2a"
  map_public_ip_on_launch = "true"
  tags = {
    Name = "ecomm-pub-subnet-A"
  }
}

# Public Subnet - AZ - B
resource "aws_subnet" "ecomm-pub-subnet-b" {
  vpc_id                  = aws_vpc.ecomm-vpc.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "us-east-2b"
  map_public_ip_on_launch = "true"
  tags = {
    Name = "ecomm-pub-subnet-B"
  }
}

# Private Subnet - AZ - A
resource "aws_subnet" "ecomm-pvt-subnet-a" {
  vpc_id                  = aws_vpc.ecomm-vpc.id
  cidr_block              = "10.0.3.0/24"
  availability_zone       = "us-east-2a"
  map_public_ip_on_launch = "false"
  tags = {
    Name = "ecomm-pvt-subnet-A"
  }
}

# Private Subnet - AZ - B
resource "aws_subnet" "ecomm-pvt-subnet-b" {
  vpc_id                  = aws_vpc.ecomm-vpc.id
  cidr_block              = "10.0.4.0/24"
  availability_zone       = "us-east-2b"
  map_public_ip_on_launch = "false"
  tags = {
    Name = "ecomm-pvt-subnet-B"
  }
}

# Gateway
resource "aws_internet_gateway" "ecomm-gw" {
  vpc_id = aws_vpc.ecomm-vpc.id

  tags = {
    Name = "ecomm-gateway"
  }
}

# Public Route Table
resource "aws_route_table" "ecomm-pub-rt" {
  vpc_id = aws_vpc.ecomm-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.ecomm-gw.id
  }

  tags = {
    Name = "ecomm-public-route-table"
  }
}

# Private Route Table
resource "aws_route_table" "ecomm-pvt-rt" {
  vpc_id = aws_vpc.ecomm-vpc.id

  tags = {
    Name = "ecomm-private-route-table"
  }
}

# Pub Subnet A Association - RT
resource "aws_route_table_association" "ecomm-pub-asc-a" {
  subnet_id      = aws_subnet.ecomm-pub-subnet-a.id
  route_table_id = aws_route_table.ecomm-pub-rt.id
}

# Pub Subnet B Association - RT
resource "aws_route_table_association" "ecomm-pub-asc-b" {
  subnet_id      = aws_subnet.ecomm-pub-subnet-b.id
  route_table_id = aws_route_table.ecomm-pub-rt.id
}

# Pvt Subnet A Association - RT
resource "aws_route_table_association" "ecomm-pvt-asc-a" {
  subnet_id      = aws_subnet.ecomm-pvt-subnet-a.id
  route_table_id = aws_route_table.ecomm-pvt-rt.id
}

# Pvt Subnet B Association - RT
resource "aws_route_table_association" "ecomm-pvt-asc-b" {
  subnet_id      = aws_subnet.ecomm-pvt-subnet-b.id
  route_table_id = aws_route_table.ecomm-pvt-rt.id
}

# Public Network Access Control List - NACL
resource "aws_network_acl" "ecomm-pub-nacl" {
  vpc_id = aws_vpc.ecomm-vpc.id

  egress {
    protocol   = "tcp"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 65535
  }

  ingress {
    protocol   = "tcp"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 65535
  }

  tags = {
    Name = "ecomm-public-nacl"
  }
}


# Private Network Access Control List - NACL
resource "aws_network_acl" "ecomm-pvt-nacl" {
  vpc_id = aws_vpc.ecomm-vpc.id

  egress {
    protocol   = "tcp"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 65535
  }

  ingress {
    protocol   = "tcp"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 65535
  }

  tags = {
    Name = "ecomm-private-nacl"
  }
}

# Public - NACL - Subnet - A - Association
resource "aws_network_acl_association" "pub-nacl-asc-a" {
  network_acl_id = aws_network_acl.ecomm-pub-nacl.id
  subnet_id      = aws_subnet.ecomm-pub-subnet-a.id
}

# Public - NACL - Subnet - B - Association
resource "aws_network_acl_association" "pub-nacl-asc-b" {
  network_acl_id = aws_network_acl.ecomm-pub-nacl.id
  subnet_id      = aws_subnet.ecomm-pub-subnet-b.id
}

# Private - NACL - Subnet - A - Association
resource "aws_network_acl_association" "pvt-nacl-asc-a" {
  network_acl_id = aws_network_acl.ecomm-pvt-nacl.id
  subnet_id      = aws_subnet.ecomm-pvt-subnet-a.id
}

# Private - NACL - Subnet - B - Association
resource "aws_network_acl_association" "pvt-nacl-asc-b" {
  network_acl_id = aws_network_acl.ecomm-pvt-nacl.id
  subnet_id      = aws_subnet.ecomm-pvt-subnet-b.id
}

# Public Security Group
resource "aws_security_group" "ecomm-pub-sg" {
  name        = "pub-ecomm-sg"
  description = "Allow ecomm inbound traffic"
  vpc_id      = aws_vpc.ecomm-vpc.id

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "ecomm-pub-security-group"
  }
}

# Private Security Group
resource "aws_security_group" "ecomm-pvt-sg" {
  name        = "pvt-ecomm-sg"
  description = "Allow ecomm inbound traffic"
  vpc_id      = aws_vpc.ecomm-vpc.id

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  ingress {
    description = "MySQL"
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "ecomm-pvt-security-group"
  }
}

resource "aws_db_subnet_group" "database-subnet-group" {
  name        = "database subnets"
  subnet_ids  = [aws_subnet.ecomm-pub-subnet-a.id, aws_subnet.ecomm-pub-subnet-b.id]
#  vpc_id      = aws_vpc.ecomm-vpc.id
  description = "Subnets for Database Instance"

  tags = {
    Name = "Database Subnets"
  }
}
resource "aws_db_instance" "my-db-instance" {
  identifier             = "my-db-instance"
  allocated_storage      = 20
  storage_type           = "gp2"
  engine                 = "mysql"
  engine_version         = "5.7"
  instance_class         = "db.t3.micro"
  db_name                = "my_db"
  username               = "admin"
  password               = "password"
  parameter_group_name   = "default.mysql5.7"
  publicly_accessible    = true
  vpc_security_group_ids = [aws_security_group.ecomm-pub-sg.id]
  db_subnet_group_name   = aws_db_subnet_group.database-subnet-group.id

  tags = {
    Name = "MyDBInstance"
  }
}
#keypair method for Key_pair

resource "aws_key_pair" "TF_key" {
  key_name   = "TF_key"
  public_key = tls_private_key.rsa.public_key_openssh
}

resource "tls_private_key" "rsa" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "local_file" "TF-key" {
    content  = tls_private_key.rsa.private_key_pem
    filename = "tfkey"
}

# ECR Ceration.
resource "aws_ecr_repository" "ecr" {
  name                 = "ecr"
  image_tag_mutability = "MUTABLE"

  image_scanning_configuration {
    scan_on_push = true
  }
    tags = {
    Name = "Myecr"
  }
}

resource "aws_ecr_lifecycle_policy" "policy" {
  repository = aws_ecr_repository.ecr.id

  policy = <<EOF
{
    "rules": [
        {
            "rulePriority": 1,
            "description": "Expire images older than 30 days",
            "selection": {
                "tagStatus": "untagged",
                "countType": "sinceImagePushed",
                "countUnit": "days",
                "countNumber": 30
            },
            "action": {
                "type": "expire"
            }
        }
    ]
}
EOF
}

resource "aws_s3_bucket" "S3" {
  bucket = "myuniquebucketname123"
  tags = {
    Name = "My-S3"
  }
}

resource "aws_s3_bucket_cors_configuration" "S3-cors" {
  bucket = aws_s3_bucket.S3.id

  cors_rule {
    allowed_headers = ["*"]
    allowed_methods = ["PUT", "POST"]
    allowed_origins = ["https://s3-website-test.hashicorp.com"]
    expose_headers  = ["ETag"]
    max_age_seconds = 3000
  }

  cors_rule {
    allowed_methods = ["GET"]
    allowed_origins = ["*"]
  }
}


resource "aws_sns_topic" "sns_updates" {
  name            = "sns-updates-topic"
  delivery_policy = <<EOF
{
  "http": {
    "defaultHealthyRetryPolicy": {
      "minDelayTarget": 20,
      "maxDelayTarget": 20,
      "numRetries": 3,
      "numMaxDelayRetries": 0,
      "numNoDelayRetries": 0,
      "numMinDelayRetries": 0,
      "backoffFunction": "linear"
    },
    "disableSubscriptionOverrides": false,
    "defaultThrottlePolicy": {
      "maxReceivesPerSecond": 1
    }
  }
}
EOF
}

# Nat gateway 
resource "aws_eip" "nat" {
  vpc = true

  tags = {
    Name = "nat"
  }
}

resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public-us-east-1a.id

  tags = {
    Name = "nat"
  }

  depends_on = [aws_internet_gateway.igw]
}
####################################################################
resource "aws_iam_role" "nodes" {
  name = "eks-node-group-nodes"

  assume_role_policy = jsonencode({
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
    Version = "2012-10-17"
  })
}

resource "aws_iam_role_policy_attachment" "nodes-AmazonEKSWorkerNodePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.nodes.name
}

resource "aws_iam_role_policy_attachment" "nodes-AmazonEKS_CNI_Policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.nodes.name
}

resource "aws_iam_role_policy_attachment" "nodes-AmazonEC2ContainerRegistryReadOnly" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.nodes.name
}

resource "aws_eks_node_group" "private-nodes" {
  cluster_name    = aws_eks_cluster.demo.name
  node_group_name = "private-nodes"
  node_role_arn   = aws_iam_role.nodes.arn

  subnet_ids = [
    aws_subnet.ecomm-pvt-subnet-a.id,
    aws_subnet.ecomm-pvt-subnet-b.id
  ]

  capacity_type  = "ON_DEMAND"
  instance_types = ["t3.small"]

  scaling_config {
    desired_size = 1
    max_size     = 5
    min_size     = 0
  }

  update_config {
    max_unavailable = 1
  }

  labels = {
    role = "general"
  }

  # taint {
  #   key    = "team"
  #   value  = "devops"
  #   effect = "NO_SCHEDULE"
  # }

  # launch_template {
  #   name    = aws_launch_template.eks-with-disks.name
  #   version = aws_launch_template.eks-with-disks.latest_version
  # }

  depends_on = [
    aws_iam_role_policy_attachment.nodes-AmazonEKSWorkerNodePolicy,
    aws_iam_role_policy_attachment.nodes-AmazonEKS_CNI_Policy,
    aws_iam_role_policy_attachment.nodes-AmazonEC2ContainerRegistryReadOnly,
  ]
}

# resource "aws_launch_template" "eks-with-disks" {
#   name = "eks-with-disks"

#   key_name = "local-provisioner"

#   block_device_mappings {
#     device_name = "/dev/xvdb"

#     ebs {
#       volume_size = 50
#       volume_type = "gp2"
#     }
#   }
# }


data "tls_certificate" "eks" {
  url = aws_eks_cluster.demo.identity[0].oidc[0].issuer
}

resource "aws_iam_openid_connect_provider" "eks" {
  client_id_list  = ["sts.amazonaws.com"]
  thumbprint_list = [data.tls_certificate.eks.certificates[0].sha1_fingerprint]
  url             = aws_eks_cluster.demo.identity[0].oidc[0].issuer
}


data "aws_iam_policy_document" "test_oidc_assume_role_policy" {
  statement {
    actions = ["sts:AssumeRoleWithWebIdentity"]
    effect  = "Allow"

    condition {
      test     = "StringEquals"
      variable = "${replace(aws_iam_openid_connect_provider.eks.url, "https://", "")}:sub"
      values   = ["system:serviceaccount:default:aws-test"]
    }

    principals {
      identifiers = [aws_iam_openid_connect_provider.eks.arn]
      type        = "Federated"
    }
  }
}

resource "aws_iam_role" "test_oidc" {
  assume_role_policy = data.aws_iam_policy_document.test_oidc_assume_role_policy.json
  name               = "test-oidc"
}

resource "aws_iam_policy" "test-policy" {
  name = "test-policy"

  policy = jsonencode({
    Statement = [{
      Action = [
        "s3:ListAllMyBuckets",
        "s3:GetBucketLocation"
      ]
      Effect   = "Allow"
      Resource = "arn:aws:s3:::*"
    }]
    Version = "2012-10-17"
  })
}

resource "aws_iam_role_policy_attachment" "test_attach" {
  role       = aws_iam_role.test_oidc.name
  policy_arn = aws_iam_policy.test-policy.arn
}

output "test_policy_arn" {
  value = aws_iam_role.test_oidc.arn
}

###############################################################################################
resource "aws_iam_role" "demo" {
  name = "eks-cluster-demo"

  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "eks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
POLICY
}

resource "aws_iam_role_policy_attachment" "demo-AmazonEKSClusterPolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.demo.name
}

resource "aws_eks_cluster" "demo" {
  name     = "demo"
  role_arn = aws_iam_role.demo.arn

  vpc_config {
    subnet_ids = [
      aws_subnet.ecomm-pvt-subnet-a.id,
      aws_subnet.ecomm-pvt-subnet-b.id,
      aws_subnet.ecomm-pub-subnet-a.id,
      aws_subnet.ecomm-pub-subnet-b.id
    ]
  }

 
}

resource "aws_iam_role" "nodes" {
  name = "eks-node-group-nodes"

  assume_role_policy = jsonencode({
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
    Version = "2012-10-17"
  })
}

resource "aws_iam_role_policy_attachment" "nodes-AmazonEKSWorkerNodePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.nodes.name
}

resource "aws_iam_role_policy_attachment" "nodes-AmazonEKS_CNI_Policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.nodes.name
}

resource "aws_iam_role_policy_attachment" "nodes-AmazonEC2ContainerRegistryReadOnly" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.nodes.name
}

resource "aws_eks_node_group" "demo_nodes" {
  cluster_name    = aws_eks_cluster.demo.name
  node_group_name = "demo-node-group"
  node_role_arn   = aws_iam_role.nodes.arn

  subnet_ids = [
    aws_subnet.ecomm-pvt-subnet-a.id,
    aws_subnet.ecomm-pvt-subnet-b.id,
    aws_subnet.ecomm-pub-subnet-a.id,
    aws_subnet.ecomm-pub-subnet-b.id,
  ]

  scaling_config {
    desired_size = 2
    max_size     = 3
    min_size     = 1
  }
}
# ec2 instance
resource "aws_instance" "web" {
count = 2
ami = "ami-005e54dee72cc1d00"
instance_type = "t2.micro"
key_name = "vinay"
security_group = ["sg-ob800b1nf5gh"]
tags = {
Name = "HelloWorld"
}
}
